import groovy.json.JsonBuilder

class EnvironmentPluginExtension implements GroovyInterceptable {
    Map<String, Map<String, Object>> environments = [:]

    def methodMissing(String name, Object args) {
        environments[name] = ["name": name]
        def cl = (Closure<Map<String, Object>>) args[0]
        cl.delegate = environments[name]
        cl()
    }
}

class EnvironmentPlugin implements Plugin<Project> {
    static String toJson(Map<String, Object> map) {
        return new JsonBuilder(map).toPrettyString()
    }

    static def createEnvTask(Project project, Map<String, Map<String, Object>> envs) {
        project.task("environments") {
            group = "environment"
            doFirst {
                println("${envs.size()} environments configured")
                envs.each { k, v ->
                    println(toJson(v) + "\n" + "= = = = = = = = = = = =")
                }
            }
        }
    }

    static def createPrepareEnvTasks(Project project, Map<String, Map<String, Object>> envs, List<File> files, Task anchorTask) {
        envs.each { k, v ->
            def taskName = "prepare${k.capitalize()}Env"
            project.task(taskName) {
                finalizedBy anchorTask
                group = "environment"
                doFirst {
                    files.each {
                        println("Writing to $it.name")
                        it.write(toJson(v))
                    }
                }
            }
        }
    }

    static def createJsTasks(Project project, Map<String, Map<String, Object>> envs) {
        envs.each { k, v ->
            def prepareTask = "prepare${k.capitalize()}Env"
            project.task("run${k.capitalize()}") {
                group = "run"
                dependsOn project.tasks.getByName(prepareTask)
                finalizedBy project.tasks.getByName("run")
            }

            project.task("bundle${k.capitalize()}") {
                group = "build"
                dependsOn project.tasks.getByName(prepareTask)
                finalizedBy project.tasks.getByName("bundle")
            }
        }
    }

    static def createJvmTasks(Project project, Map<String, Map<String, Object>> envs) {
        envs.each { k, v ->
            def prepareTask = project.tasks.getByName("prepare${k.capitalize()}Env")
            project.task("run${k.capitalize()}") {
                group = "run"
                dependsOn prepareTask
                finalizedBy project.tasks.getByName("run")
            }

            project.task("installDist${k.capitalize()}") {
                group = "distribution"
                dependsOn prepareTask

                doLast {
                    project.copy {
                        from("build/install/${project.name}")
                        into(("build/install/${project.name}-$k"))
                    }
                }
            }
        }
    }

    static def createAndroidTasks(Project project, Map<String, Map<String, Object>> envs) {
        project.android.applicationVariants.all { variant ->
            def prepareTask = project.tasks.getByName("prepare${variant.name.capitalize()}Env")
            project.task("installRun${variant.name.capitalize()}", type: Exec) {
                group = "run"
                dependsOn prepareTask
                dependsOn "install${variant.name.capitalize()}"
                commandLine = ["adb", "shell", "monkey", "-p", variant.applicationId + " 1"]
                doLast {
                    println "Launching ${variant.applicationId}"
                }
            }

            project.tasks.getByName("assemble${variant.name.capitalize()}").dependsOn(prepareTask)
        }
    }

    @Override
    void apply(Project project) {
        def environments = project.extensions.create("environments", EnvironmentPluginExtension)
        def envs = environments.environments
        project.afterEvaluate {
            def files = []
            try {
                def task = project.tasks.getByName("compileKotlinJs")
                println("${task.name} found, creating environment tasks for JS Environment")
                def file = project.file("build/resources/main/platform.environment.json")
                file.parentFile.mkdirs()
                file.createNewFile()
                files += file
                createPrepareEnvTasks(project, envs, files, task)
                createJsTasks(project, envs)
            } catch (Exception e) {
                println(e)
            }

            try {
                def task = project.tasks.getByName("installDist")
                println("${task.name} found, creating environment tasks for JVM Environment")
                def file = project.file("build/resources/main/platform.environment.json")
                file.parentFile.mkdirs()
                file.createNewFile()
                files += file
                createPrepareEnvTasks(project, envs, files, task)
                createJvmTasks(project, envs)
            } catch (Exception e) {

            }

            try {
                def task = project.tasks.getByName("preBuild")
                println("${task.name} found, creating environment tasks for Android Environment")
                envs.each { k, v ->
                    def file = project.file("build/intermediates/merged_assets/$k/merge${k.capitalize()}Assets/out/platform.environment.json")
                    file.parentFile.mkdirs()
                    file.createNewFile()
                    files += file
                }
                createPrepareEnvTasks(project, envs, files, task)
                createAndroidTasks(project, envs)
            } catch (Exception e) {

            }
            createEnvTask(project, envs)
        }
    }
}

apply plugin: EnvironmentPlugin